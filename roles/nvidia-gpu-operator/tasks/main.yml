---
# https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/latest/getting-started.html

- name: Wait for port 6443
  wait_for:
    port: 6443

- name: Create gpu-operator namespace
  shell: |
    kubectl create ns gpu-operator
    kubectl label --overwrite ns gpu-operator pod-security.kubernetes.io/enforce=privileged
  retries: 5
  delay: 60

- name: Check for Node Feature Discovery
  shell: >
    kubectl get nodes -o json | jq '.items[].metadata.labels | keys | any(startswith("feature.node.kubernetes.io"))'
  register: nfd_check_result

- name: Set enable_nfd fact
  set_fact:
    enable_nfd: true
  when: "'true' not in nfd_check_result.stdout"

- name: Print enable_nfd
  debug:
    msg: "Enable NFD: {{ enable_nfd }}"

- name: Copy time-slicing-config-all.yaml
  template:
    src: time-slicing-config-all.yaml.j2
    dest: ~/time-slicing-config-all.yaml
  when: enable_time_slicing

- name: Apply time-slicing config map
  shell: >
    kubectl apply -f time-slicing-config-all.yaml
  when: enable_time_slicing

- name: Add nvidia helm repo
  kubernetes.core.helm_repository:
    name: nvidia
    repo_url: https://helm.ngc.nvidia.com/nvidia

- name: Install NVIDIA GPU Operator
  kubernetes.core.helm:
    name: gpu-operator
    chart_ref: nvidia/gpu-operator
    chart_version: "{{ gpu_operator_chart_version | default('25.3.0') }}"
    release_namespace: "{{ gpu_operator_release }}"
    create_namespace: true
    values:
      driver:
        enabled: false
      nfd:
        enabled: "{{ enable_nfd }}"
      toolkit:
        env:
          - name: CONTAINERD_SOCKET
            value: /run/k3s/containerd/containerd.sock
  when: not enable_time_slicing

# see https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/latest/gpu-sharing.html#time-slicing-gpus-in-kubernetes
- name: Install NVIDIA GPU Operator with time slicing enabled
  kubernetes.core.helm:
    name: gpu-operator
    chart_ref: nvidia/gpu-operator
    chart_version: "{{ gpu_operator_chart_version | default('25.3.0') }}"
    release_namespace: "{{ gpu_operator_release }}"
    create_namespace: true
    values:
      driver:
        enabled: false
      nfd:
        enabled: "{{ enable_nfd }}"
      toolkit:
        env:
          - name: CONTAINERD_SOCKET
            value: /run/k3s/containerd/containerd.sock
      devicePlugin:
        config:
          name: time-slicing-config-all
          default: any
  when: enable_time_slicing

- name: Wait for NVIDIA GPU Operator Deploy to be rolled out
  shell: >
    kubectl -n {{ gpu_operator_namespace }} rollout status deploy/{{ item }} --timeout=120s
  register: gpu_operator_deploy_rollout_result
  retries: 10
  delay: 30
  with_items:
  - "{{ gpu_operator_release }}"
  until: "'successfully rolled out' in gpu_operator_deploy_rollout_result.stdout"

- name: Wait for NVIDIA GPU Operator NFD Deploy to be rolled out
  shell: >
    kubectl -n {{ gpu_operator_namespace }} rollout status deploy/{{ item }} --timeout=120s
  register: gpu_operator_deploy_rollout_result
  retries: 10
  delay: 30
  with_items:
  - "{{ gpu_operator_release }}-node-feature-discovery-gc"
  - "{{ gpu_operator_release }}-node-feature-discovery-master"
  until: "'successfully rolled out' in gpu_operator_deploy_rollout_result.stdout"
  when: enable_nfd

# https://docs.rke2.io/advanced#deploy-nvidia-operator
# WARNING: The NVIDIA operator restarts containerd with a hangup call which restarts RKE2
- name: Pause for cluster to stabilize
  ansible.builtin.pause:
    minutes: 4

- name: Wait for port 9345
  wait_for:
    port: 9345
    delay: 10
    timeout: 120

- name: Wait for NVIDIA GPU Operator NFD DaemonSet to be rolled out
  shell: >
    kubectl -n {{ gpu_operator_namespace }} rollout status daemonset/{{ item }} --timeout=120s
  register: gpu_operator_ds_rollout_result
  retries: 10
  delay: 60
  with_items:
  - "{{ gpu_operator_release }}-node-feature-discovery-worker"
  - "gpu-feature-discovery"
  - "nvidia-container-toolkit-daemonset"
  - "nvidia-device-plugin-daemonset"
  until: "'successfully rolled out' in gpu_operator_ds_rollout_result.stdout"
  when: enable_nfd

